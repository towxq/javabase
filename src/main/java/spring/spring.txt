Spring
1,核心容器
    提供了spring框架的核心功能，BeanFactory是Spring核心容器的主要组件，他通过控制反转将程序的配置和依赖性规范与实际的应用程序代码分开。
2，Spring Context
    通过配置文件，向Spring框架提供上下文信息，它构建在BeanFactory之上
3,Spring AOP
    Spring提供了面向方面编程的功能，因为Spring的核心是基于控制反转的，所以可以很容易的使Spring的依赖注入为AOP提供支持
4,Spring DAO
    提供了一个简单又有效的JDBC应用
5,Spring ORM
    Spring除了有自己的JDBC应用外，还提供一些ORM框架的支持
6,Spring WEB
    提供简单的处理多部分请求以及将请求参数绑定到域对象的任务
7,Spring MVC
    提供了MVC模式的支持

1，良好的分层结构
2，以IOC为核心，面向接口编程，便于扩展和维护
3，良好的架构设计，使的应用程序尽可能少的依赖应用程序的环境，使应用脱离了环境的影响

IOC 控制反转
IOC是一种思想，IOC意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部控制
spring的核心，对于spring框架来说，spring负责控制对象的生命周期和对象间的关系，所有的类都会在容器中登记，告诉spring你是什么，你需要什么
然后spring会在运行到适当的时候，把东西给你，同时把你给需要你的东西。所有的类的创建，销毁都有spring来控制。也就是控制对象生存周期的不在是
引用它的对象，而是spring，对于某个对象而言，以前是它控制对象，而现在所有的对象被spring控制，这叫控制反转

DI 依赖注入
动态的向某个对象提供它所需的其他对象，这一点通过DI来实现

控制的什么被反转了？就是：获得依赖对象的方式反转了

spring中，bean的初始化有两种方式
1，在配置文件中通过指定init-method属性来完成
2，实现org.springframework.beans.InitializingBean接口

1，读取Bean配置信息
2，根据Bean注册表实例化Bean
3，将Bean实例放到Spring中
4，使用Bean


１、ResourceLoader从存储介质中加载Spring配置信息，并使用Resource表示这个配置文件的资源；
２、BeanDefinitionReader读取Resource所指向的配置文件资源，然后解析配置文件。配置文件中每一个<bean>解析成一个BeanDefinition对象，
并保存到BeanDefinitionRegistry中；
３、容器扫描BeanDefinitionRegistry中的BeanDefinition，使用Java的反射机制自动识别出Bean工厂后处理后器（实现BeanFactoryPostProcessor接口）的Bean，
然后调用这些Bean工厂后处理器对BeanDefinitionRegistry中的BeanDefinition进行加工处理。主要完成以下两项工作：
1）对使用到占位符的<bean>元素标签进行解析，得到最终的配置值，这意味对一些半成品式的BeanDefinition对象进行加工处理并得到成品的BeanDefinition对象；
2）对BeanDefinitionRegistry中的BeanDefinition进行扫描，通过Java反射机制找出所有属性编辑器的Bean（实现java.beans.PropertyEditor接口的Bean），
并自动将它们注册到Spring容器的属性编辑器注册表中（PropertyEditorRegistry）；
4．Spring容器从BeanDefinitionRegistry中取出加工后的BeanDefinition，并调用InstantiationStrategy着手进行Bean实例化的工作；
5．在实例化Bean时，Spring容器使用BeanWrapper对Bean进行封装，BeanWrapper提供了很多以Java反射机制操作Bean的方法，
它将结合该Bean的BeanDefinition以及容器中属性编辑器，完成Bean属性的设置工作；
6．利用容器中注册的Bean后处理器（实现BeanPostProcessor接口的Bean）对已经完成属性设置工作的Bean进行后续加工，
直接装配出一个准备就绪的Bean。