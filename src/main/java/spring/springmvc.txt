Content-Type
    application/x-www-form-urlencoded 浏览器的原生 form 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。
            请求类似于下面这样（无关的请求头在本文中都省略掉了）：
                      POST http://www.example.com HTTP/1.1
                      Content-Type: application/x-www-form-urlencoded;charset=utf-8
                      title=test&sub%5B%5D=1&sub%5B%5D=2&sub%5B%5D=3
            Content-Type 被指定为 application/x-www-form-urlencoded；其次，提交的数据按照 key1=val1&key2=val2 的方式进行编码，key 和 val 都进行了 URL 转码。
            大部分服务端语言都对这种方式有很好的支持

     application/json
            application/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。
            由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。
                    最终发送的请求是
                    POST http://www.example.com HTTP/1.1
                    Content-Type: application/json;charset=utf-8
                    {"title":"test","sub":[1,2,3]}


springMVC原理
    客户端发送请求
    -> 前端控制器 DispatcherServlet 接受客户端请求
    -> 找到处理器映射 HandlerMapping 解析请求对应的 Handler
    -> HandlerAdapter 会根据 Handler 来调用真正的处理器开处理请求，并处理相应的业务逻辑
    -> 处理器返回一个模型视图 ModelAndView
    -> 视图解析器进行解析
    -> 返回一个视图对象
    ->前端控制器 DispatcherServlet 渲染数据（Moder）
    ->将得到视图对象返回给用户


@PathVariable绑定URI模板变量值
    @PathVariable用于将请求URL中的模板变量映射到功能处理方法的参数上。
        @RequestMapping(value="/users/{userId}/topics/{topicId}")
        public String test(
               @PathVariable(value="userId") int userId,
               @PathVariable(value="topicId") int topicId)


@CookieValue绑定Cookie数据值
    @CookieValue用于将请求的Cookie数据映射到功能处理方法的参数上。
        public String test(@CookieValue(value="JSESSIONID", defaultValue="") String sessionId)


@RequestHeader绑定请求头数据
    @RequestHeader用于将请求的头信息区数据映射到功能处理方法的参数上。
        @RequestMapping(value="/header")
        public String test(
               @RequestHeader("User-Agent") String userAgent,
               @RequestHeader(value="Accept") String[] accepts)


@RequestParam接收的参数是来自requestHeader中，即请求头。通常用于GET，POST请求
    @RequestParam有三个配置参数：
        required 表示是否必须，默认为 true，必须。
        defaultValue 可设置请求参数的默认值。
        value 为接收url的参数名（相当于key值）。
    @RequestParam用来处理 Content-Type 为 application/x-www-form-urlencoded 编码的内容，Content-Type 默认为该属性。


@RequestBody接收的参数是来自requestBody中，即请求体。一般用于处理非 Content-Type: application/x-www-form-urlencoded编码格式的数据
    比如：application/json、application/xml等类型的数据。就application/json类型的数据而言，使用注解@RequestBody可以将body里面所有的json数据传到后端，后端再进行解析。


@SessionAttributes:
    该注解用来绑定HttpSession中的attribute对象的值，便于在方法中的参数里使用。
    该注解有value、types两个属性，可以通过名字和类型指定要使用的attribute 对象
        @Controller
        @RequestMapping("/editPet.do")
        @SessionAttributes("pet")
        public class EditPetForm {
            // ...
        }

@ModelAttribute
    该注解有两个用法，一个是用于方法上，一个是用于参数上；
    用于方法上时：  通常用来在处理@RequestMapping之前，为请求绑定需要从后台查询的model；
    用于参数上时： 用来通过名称对应，把相应名称的值绑定到注解的参数bean上；要绑定的值来源于：
    A） @SessionAttributes 启用的attribute 对象上；
    B） @ModelAttribute 用于方法上时指定的model对象；
    C） 上述两种情况都没有时，new一个需要绑定的bean对象，然后把request中按名称对应的方式把值绑定到bean中。