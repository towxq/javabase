Redis
    ubuntu安装redis
        sudo apt-get update
        sudo apt-get install redis-server

        启动redis
        redis -server

        查看redis是否启动
        redis-cli

        redis 127.0.0.1:6379>ping
        PONG

    Redis支持的五种数据类型
         string(字符串)  二进制安全的，可以包含任何数据，最大512M,字符串可以存储字节串，整数，浮点数
            get  keyname  value
            set  keyname
            del  keyname


         hash(哈希)   hash是一个键值的集合 每个哈希可以存储40多亿的键值对
                hset 在散列里面关联给定的键值对
                hset hash-ket sub-keyq value1
            hget 获取指定散列键的值
                hget hash-key sub-key1
            hgetall 获取散列包含的键值对
                hgetall hash-key
            hdel 如果给定的键存在散列里，则移除
                hdel hash-key sub-key1


         list(列表)  简单的字符串的列表，按照插入的顺序排序，可以添加一个元素到列表的头部或者尾部 每个列表可以存储40多亿
            rpush 将指定的值推入列表的右端
                rpush list-key-name value
            lrange 获取列表在给定范围的值
                lrange list-key-name 0 -1
            lindex 获取列表在给定位置的单个元素
                lindex list-key-name 1
            lpop 从列表的左端弹出一个值，并放回被弹出的值
                lpop list-key-name


         set(基础知识.集合)   string类型的无序集合 集合可以通过哈希表实现
            sadd 将给定的元素添加到集合
                sadd set-key value
            smembers 返回集合包含的所有元素
                smember set-key
            sismember 检查给定的元素是否存在集合中
                sismember set-key value
            srem 如果给定的元素存在于集合中，移除该元素
                srem set-key value

         zset(有序集合)  zser和set一样也是string类型的集合，但是不允许重复的
            zadd 将一个带有给定分值得成员添加到有序集合里
                zadd zset-key 728 member1
                zadd zset-key 982 member0
            zrange 根据元素在有序排列中所处的位置，从有序集合里面获取多个元素
                zrange zset-key 0 -1 withscores
            zrangebyscore 获取有序集合在给定分值范围内的所有元素
                zrangebyscore zset-key 0 800 withscores
            zrem 如果给定成员存在于有序集合，那么移除这个成员
                zrem zset-key member1


    redis事务可以一次执行多个命令
        1，批量操作在发送exec命令前被放入队列缓存
        2，收到exec命令后进入事务执行，事务中任意命令执行失败，其余命令已然执行
        3，在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令列中


        一个事务从开始到执行会经历以下三个阶段
        开始事务
        命令入列
        执行事务
        单个redis命令执行是原子性的，redis没有在事务上增加任何维持原子性的机制，所以redis事务的执行并不是原子性的
        事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化的操作，中间某指令的失败不会导致前面指令的回滚，也不会造成后续的指令不做


    持久化选项
        1，快照
            bgsave redis会调用fork来创建一个子进程，子进程负责将快照写入硬盘，父进程继续处理请求，redis的内存越来越多的时候，bgsave在创建子进程时，所耗费的
                   时间会越来越久，所以会导致redis的性能降低。
            save redis服务在创建快照完毕之前不在响应其他任何的请求
        2，只追加文件
            AOF持久化会将执行的命令写到AOF文件的末尾，来记录变化。

分布式锁
    Redis使用WATCH命令来代替对数据进行加锁，因为WATCH命令只会在数据被其他客户端抢先修改的情况下通知执行了这个命令的客户端，
    而不会阻止其他客户端对数据进行修改，所以这个命令称为乐观锁


缓存穿透
    原因：缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，
    这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。在流量大时，可能DB就挂掉了

    解决方法：最常见的则是采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被 这个bitmap拦截掉，
    从而避免了对底层存储系统的查询压力。另外也有一个更为简单粗暴的方法（我们采用的就是这种），如果一个查询返回的数据为空（不管是数 据不存在，还是系统故障），
    我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟

缓存雪崩
    原因：缓存雪崩是指在我们设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时压力过重雪崩

    解决方法：在原有的实效时间设计一个随机值

缓存击穿
    原因：对于一些设置了过期时间的key，如果这些key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题，
    这个和缓存雪崩的区别在于这里针对某一key缓存，前者则是很多key。缓存在某个时间点过期的时候，恰好在这个时间点对这个Key有大量的并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，
    这个时候大并发的请求可能会瞬间把后端DB压垮。

    解决方案：                       优点                                    缺点

    简单分布式互斥锁（mutex key）	    1. 思路简单                           1. 代码复杂度增大
                                    2. 保证一致性                         2. 存在死锁的风险
                                                                          3. 存在线程池阻塞的风险


   “提前”使用互斥锁	                1. 保证一致性	                       同上 


    不过期(本文)                     1. 异步构建缓存，不会阻塞线程池           1. 不保证一致性。
                                                                            2. 代码复杂度增大(每个value都要维护一个timekey)。
                                                                            3. 占用一定的内存空间(每个value都要维护一个timekey)。

    资源隔离组件hystrix(本文)        1. hystrix技术成熟，有效保证后端。        1. 部分访问存在降级策略。
                                    2. hystrix监控强大。


redis的线程模型

redis过期策略 定期删除加惰性删除    内存淘汰策略 LRU


redis的集群架构   读写分离   主从复制   水平扩容
    master节点  master节点做持久化
    slave节点

主从复制
    1，slave node启动，仅仅保存master node信息，包括master的host和ip，还没开始复制
    2，slave内部有定时任务，每秒检查是否有新的master要连接和复制，发现就建立socket连接
    3，slave 发送 ping 给master
    4，口令认证，如果master收到requirepass 那么salve 必须发送masterauth的口令过去进行认证
    5，master第一次执行全量复制，将数据发送给slave
    6，master后续写命令，同步复制给slave

    slave->master选举
        1,master断开时间
        2，slave优先级
        3，复制offset
        4，run id

哨兵
    1，集群监控，负责监控master和slave进程是否正常
    2，消息通知，如果某个redis实例有故障，哨兵会发送消息给管理员
    3，故障转移，如果master挂掉了，会自动转移到slave
    4，配置中心，如果故障转移发生，通知client新的master地址

    哨兵本身也是分布式的，作为一个哨兵集群去工作
    1，故障转移时，判断一个master宕机，需要大部分的哨兵同意才行，涉及到分布式选举问题
    2，部分哨兵节点挂掉，哨兵集群还能正常工作

    核心知识
        1，哨兵需要至少三个实例，来促进自己的健壮性
        2，哨兵+redis主从的部署架构，是不会保证数据的零丢失，只能保证redis集群的高可用性
        3，对于哨兵+redis主从这种复杂的部署结构，尽量在测试环境和生产环境，都进行充足的测试和演练

手写LRU算法
    public class LRUCache<K,V> extends LinkedHashMap<K,V>{
        private final int CACHE_SIZE;

        public LRUCache(int cacheSize){
            super((int) Math.ceil(cacheSize/0.75)+1,0.75f,true);//这块设置一个HashMap的初始大小，true指的是按照访问顺序来进行排序，最近的在前，最后的在右
            CACHE_SIZE = cachaeSize;
        }

        boolean removeEldestEntry(Map.Entry eldst){
            return size()> CACHE_SIZE;//当map中的数据大于指定的缓存个数的时候，自动删除最老的数据
        }
    }


redis的优势
    1，高度写  redis的读的速度 为 100000 次/s  写 80000次/s
    2，redis的所有的操作都是原子性的，单个操作是原子性的，多个操作可以通过MULTI和EXEC指令抱起来

