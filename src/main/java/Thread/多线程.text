进程：每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含1--n个线程。（进程是资源分配的最小单位）

线程：同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器(PC)，线程切换开销小。（线程是cpu调度的最小单位）

线程和进程一样分为五个阶段：创建、就绪、运行、阻塞、终止。

多进程是指操作系统能同时运行多个任务（程序）

多线程是指在同一程序中有多个顺序流在执行。

并行：多个cpu实例或者多台机器处理执行一段处理逻辑，是真正的同时

并发：通过CPU调度算法，让用户看上去同时执行，实际上从cpu操作层面不是真正的同时

线程安全：经常用来描述一段代码，指在并发的情况下，该代码经过多线程使用，线程的调度不影响任何结果，这个时候使用多线程，我们只关注系统的内存，CPU是不是够用
反过来，线程不安全意味着线程的调度顺序会影响最终的结果

同步：Java中的同步指的是通过人为的控制和调度，保证共享资源的多线程访问成为线程安全。线程的安全高于性能

线程的状态：
1.新建状态（new）：创建一个线程对象
2，就绪状态（runnable） ：线程对象创建后，其他线程调用了该对象的start()方法，该状态的线程处于可运行线程池中，变得可运行，等待获得CPU的使用权
3，运行状态（running）：就绪状态的线程获取了CPU，执行程序代码
4，阻塞状态（blocked）: 阻塞状态是多线程因为某种原因放弃CPU的使用权，暂时停止运行，直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：
    1，等待阻塞  wait()  会释放持有的锁
    2，同步阻塞  运行的线程在获取对象的同步锁时，若改锁被别的线程占用，则jvm会把该线程放入锁池中
    3，其他阻塞  运行的线程执行sleep()或join()方法 或者发出了IO请求，jvm会把该线程置为阻塞状态，当sleep()状态超时时，
    join()等待线程终止或者超时，等待io处理完毕，线程重新转入就绪状态

线程调度：
1，线程调度优先级： 取值是1--10 最高是10  最低是1  默认是5
2，线程睡眠Thread.sleep(long millis) 使线程转到阻塞状态,毫秒为单位