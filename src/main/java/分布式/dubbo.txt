Dubbo架构
    节点              角色说明
    Provider          暴露服务的服务提供方
    Consumer          调用远程服务的服务消费方
    Registry          服务注册于服务发现中心
    Monitor           统计服务的调用次数和调用时间的监控中心
    Container         服务运行容器


    调用关系说明
        0，服务容器负责启动，加载，运行服务提供者
        1，服务提供者在启动时，向注册中心注册自己提供的服务
        2，服务消费者在启动时，向注册中心订阅自己所需的服务
        3，注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者
        4，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，在选另外一台调用
        5，服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心

    Dubbo有以下特点
        1，连通性
            注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小
            监控中心负责统计各服务调用次数，调用时间等，统计先在内存汇总后每分钟一次发送到监控中心服务器，并以报表展示
            服务提供者向注册中心注册其提供的服务，并汇报调用时间到监控中心，此时间不包含网络开销
            服务消费者向注册中心获取服务提供者地址列表，并根据负载算法直接调用提供者，同时汇报调用时间到监控中心，此时间包含网络开销
            注册中心，服务提供者，服务消费者三者之间均为长连接，监控中心除外
            注册中心通过长连接感知服务提供者的存在，服务提供者宕机，注册中心将立即推送事件通知消费者
            注册中心和监控中心全部宕机，不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表
            注册中心和监控中心都是可选的，服务消费者可以直连服务提供者
        2，健壮性
            监控中心宕掉不影响使用，只是丢失部分采样数据
            数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务
            注册中心对等集群，任意一台宕掉后，将自动切换到另一台
            注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯
            服务提供者无状态，任意一台宕掉后，不影响使用
            服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复
        3，伸缩性
            注册中心为对等集群，可动态增加机器部署实例，所有客户端将自动发现新的注册中心
            服务提供者无状态，可动态增加机器部署实例，注册中心将推送新的服务提供者信息给消费者
        4，升级性
            当服务集群规模进一步扩大，带动IT治理结构进一步升级，需要实现动态部署，进行流动计算，现有分布式服务架构不会带来阻力。下图是未来可能的一种架构：

                        节点          	角色说明
                        Deployer	    自动部署服务的本地代理
                        Repository	    仓库用于存储服务应用发布包
                        Scheduler	    调度中心基于访问压力自动增减服务提供者
                        Admin	        统一管理控制台
                        Registry	    服务注册与发现的注册中心
                        Monitor	        统计服务的调用次数和调用时间的监控中心


     配置关系
            标签              	    用途              	解释
            <dubbo:service/>	    服务配置            	用于暴露一个服务，定义服务的元信息，一个服务可以用多个协议暴露，一个服务也可以注册到多个注册中心
            <dubbo:reference/> 	    引用配置	            用于创建一个远程服务代理，一个引用可以指向多个注册中心
            <dubbo:protocol/>	    协议配置	            用于配置提供服务的协议信息，协议由提供方指定，消费方被动接受
            <dubbo:application/>	应用配置	            用于配置当前应用信息，不管该应用是提供者还是消费者
            <dubbo:module/>	        模块配置            	用于配置当前模块信息，可选
            <dubbo:registry/>	    注册中心配置	        用于配置连接注册中心相关信息
            <dubbo:monitor/>	    监控中心配置	        用于配置连接监控中心相关信息，可选
            <dubbo:provider/>	    提供方配置	        当 ProtocolConfig 和 ServiceConfig 某属性没有配置时，采用此缺省值，可选
            <dubbo:consumer/>	    消费方配置	        当 ReferenceConfig 某属性没有配置时，采用此缺省值，可选
            <dubbo:method/>	        方法配置	            用于 ServiceConfig 和 ReferenceConfig 指定方法级的配置信息
            <dubbo:argument/>	    参数配置	            用于指定方法参数配置

    不同粒度配置的覆盖关系
        方法级优先，接口级次之，全局配置再次之。
        如果级别一样，则消费方优先，提供方次之。






    各层说明
        config 配置层：对外配置接口，以 ServiceConfig, ReferenceConfig 为中心，可以直接初始化配置类，也可以通过 spring 解析配置生成配置类
        proxy 服务代理层：服务接口透明代理，生成服务的客户端 Stub 和服务器端 Skeleton, 以 ServiceProxy 为中心，扩展接口为 ProxyFactory
        registry 注册中心层：封装服务地址的注册与发现，以服务 URL 为中心，扩展接口为 RegistryFactory, Registry, RegistryService
        cluster 路由层：封装多个提供者的路由及负载均衡，并桥接注册中心，以 Invoker 为中心，扩展接口为 Cluster, Directory, Router, LoadBalance
        monitor 监控层：RPC 调用次数和调用时间监控，以 Statistics 为中心，扩展接口为 MonitorFactory, Monitor, MonitorService
        protocol 远程调用层：封装 RPC 调用，以 Invocation, Result 为中心，扩展接口为 Protocol, Invoker, Exporter
        exchange 信息交换层：封装请求响应模式，同步转异步，以 Request, Response 为中心，扩展接口为 Exchanger, ExchangeChannel, ExchangeClient, ExchangeServer
        transport 网络传输层：抽象 mina 和 netty 为统一接口，以 Message 为中心，扩展接口为 Channel, Transporter, Client, Server, Codec
        serialize 数据序列化层：可复用的一些工具，扩展接口为 Serialization, ObjectInput, ObjectOutput, ThreadPool

    关系说明
        1,在 RPC 中，Protocol 是核心层，也就是只要有 Protocol + Invoker + Exporter 就可以完成非透明的 RPC 调用，然后在 Invoker 的主过程上 Filter 拦截点。
        2,图中的 Consumer 和 Provider 是抽象概念，只是想让看图者更直观的了解哪些类分属于客户端与服务器端，不用 Client 和 Server 的原因是 Dubbo
          在很多场景下都使用 Provider, Consumer, Registry, Monitor 划分逻辑拓普节点，保持统一概念。
        3,而 Cluster 是外围概念，所以 Cluster 的目的是将多个 Invoker 伪装成一个 Invoker，这样其它人只要关注 Protocol 层 Invoker 即可，
          加上 Cluster 或者去掉 Cluster 对其它层都不会造成影响，因为只有一个提供者时，是不需要 Cluster 的。
        4,Proxy 层封装了所有接口的透明化代理，而在其它层都以 Invoker 为中心，只有到了暴露给用户使用时，才用 Proxy 将 Invoker 转成接口，
          或将接口实现转成 Invoker，也就是去掉 Proxy 层 RPC 是可以 Run 的，只是不那么透明，不那么看起来像调本地服务一样调远程服务。
        5,而 Remoting 实现是 Dubbo 协议的实现，如果你选择 RMI 协议，整个 Remoting 都不会用上，Remoting 内部再划为 Transport 传输层和 Exchange 信息交换层，
          Transport 层只负责单向消息传输，是对 Mina, Netty, Grizzly 的抽象，它也可以扩展 UDP 传输，而 Exchange 层是在传输层之上封装了 Request-Response 语义。
        6,Registry 和 Monitor 实际上不算一层，而是一个独立的节点，只是为了全局概览，用层的方式画在一起。

    模块分包
        dubbo-common 公共逻辑模块：包括 Util 类和通用模型。
        dubbo-remoting 远程通讯模块：相当于 Dubbo 协议的实现，如果 RPC 用 RMI协议则不需要使用此包。
        dubbo-rpc 远程调用模块：抽象各种协议，以及动态代理，只包含一对一的调用，不关心集群的管理。
        dubbo-cluster 集群模块：将多个服务提供方伪装为一个提供方，包括：负载均衡, 容错，路由等，集群的地址列表可以是静态配置的，也可以是由注册中心下发。
        dubbo-registry 注册中心模块：基于注册中心下发地址的集群方式，以及对各种注册中心的抽象。
        dubbo-monitor 监控模块：统计服务调用次数，调用时间的，调用链跟踪的服务。
        dubbo-config 配置模块：是 Dubbo 对外的 API，用户通过 Config 使用Dubbo，隐藏 Dubbo 所有细节。
        dubbo-container 容器模块：是一个 Standlone 的容器，以简单的 Main 加载 Spring 启动，因为服务通常不需要 Tomcat/JBoss 等 Web 容器的特性，没必要用 Web 容器去加载服务。

        整体上按照分层结构进行分包，与分层的不同点在于：
            container 为服务容器，用于部署运行服务，没有在层中画出。
            protocol 层和 proxy 层都放在 rpc 模块中，这两层是 rpc 的核心，在不需要集群也就是只有一个提供者时，可以只使用这两层完成 rpc 调用。
            transport 层和 exchange 层都放在 remoting 模块中，为 rpc 调用的通讯基础。
            serialize 层放在 common 模块中，以便更大程度复用。


