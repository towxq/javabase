创建类模式
    1，工厂方法模式
        定义一个用于创建对象的接口，让子类决定实例化哪一类，使一个类的实例化延迟到其子类
    2，建造者模式
        讲一个复杂对象的构建与它的表示分离，使的同样的构建过程可以创建不同的表示
    3，抽象工厂模式
        为创建一组相关或者依赖的对象提供一个接口，而且无需指定他们的具体类
    4，单例模式
        确保其一个类只有一个实例，而且自行实例化并向整个系统提供这个实例
    5，原型模式
        通过对象复制来实现的模式就叫原型模式，用原型实例指定创建的对象的种类，并且通过拷贝这些原型创建新的对象

结构类模式
    1，适配器模式
        将一个类的接口变成客户端所期待的另一种接口，从而使原本接口不匹配而无法在一起工作的两个类能够在一起工作
    2，桥梁模式
        将抽象与实现解耦，使的两者可以独立变化
    3，组合模式
        将对象组合成树形结构以表示部分-整体的场次结构，使得用户对单个对象和组合的使用具有一致性
    4，装饰模式
        动态的给一个对象添加一些额外的职责，就增加功能来说，装饰模式相比生成子类更加灵活
    5，门面模式
        要求一个子系统的外部与其内部通讯必须通过一个统一的对象进行，门面模式提供一个高层次的接口，使得子系统更易于使用
    6，享元模式
        是池技术的重要实现方式，使得共享对象可以有效的支持大量的细粒度的对象
    7，代理模式
        为其他对象提供一种代理可以控制这个对象的访问

行为类模式
    1，责任链模式
        使多个对象都有机会处理请求，从而避免了请求的发送者和接受者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有对象处理它为止
    2，命令模式
        这是一个高内聚的模式，将一个请求封装成一个对象，从而让你使用不同的请求把客户端参数化，对请求排队或者记录日志，可以提供命令的撤销和恢复功能
    3，解释器模式
        是一种按照规定语法进行解析的方案，定义为：给定一门语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示业解释语言中的句子
    4，迭代模式
        他提供一种方法访问一个容器对象中的各个对象，而又不暴露该对象的内部细节
    5，中介者模式
        用一个中介对象封装一系列的对象交互，中介者使各个对象不需要显示相互作用从而使其解耦松散，而且可以独立的改变他们之间的交互
    6，备忘录模式
        在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样以后就可以将该对象恢复到原先保存的状态，通俗的讲，备忘录模式
        就是一个对象的备份模式，提供了一种程序数据的备份方法
    7，观察者模式
        也叫发布订阅模式，定义对象间的一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖它的对象都会得到通知并且自动更新
    8，状态模式
        状态模式核心是封装，状态的变更引起了行为的变更，当一个对象内在状态改变时，允许其改变行为，这个对象看起来像改变了其类
    9，策略模式
        定义一组算法，将每个算法封装起来，并使他们之间可以互换
    10，模板方法模式
        定义一个操作中的算法框架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义改算法的某些框架
    11，访问者模式
        封装一些作用于某种数据结构中的各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作
