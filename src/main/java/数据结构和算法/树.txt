1，二叉树
    二叉树的每个节点最多只有二颗子树（不存在大于2的节点），二叉树的子树有左右之分，次序不能颠倒
        满二叉树和完全二叉树
            满二叉树：除最后一层无任何子节点，每一层的所有节点都有两个子节点，也可以这样理解，除叶子节点外的所有节点均有两个子节点，节点数达到最大值，所有叶子节点必须在同一层上
                a,一颗数深度为h,最大层数为k，深度与最大层数相同，k=h
                b,叶子数为2h
                c,第k层的节点数是：2k-1
                d,总结点数是:2k-1 且总结点数一定是奇数
            完全二叉树：若设二叉树的深度为h,除了h层外，其他各层(1~(h-1)层)的节点数都达到最大个数，第h层所有的节点都连续集中在最左边，这就是完全二叉树

2，二叉查找树
    a,若左子树不为空，则左子树所有的节点的值均小于它的根节点的值
    b,若右子树不为空，则右子树上所有节点的值均大于或者等于它的根节点的值
    c,左，右子树也分别为二叉排序树
    d,没有键值相等的节点
    二叉查找树的性质：对二叉查找树进行中序遍历，即可得到有序的数列

3，平衡二叉树
    平衡二叉树又被称为AVL树   1，一颗空树或它的左右两个子树的高度差的绝对值不超过1
                             2，左右两个子树都是一颗平衡二叉树

4，红黑树
    红黑树是一种自平衡二叉查找树，典型的用法是实现数组的关联
    红黑树的性质：
        红黑树是每个节点都带颜色的二叉查找树，颜色为红色或黑色
            a,节点是红色或黑色
            b,根是黑色
            c,所有叶子节点都是黑色
            d,每个红色节点必须有两个黑色节点（从每个叶子到根的所有路劲上不能有两个连续的红色节点）
            e,从任一节点到其每个叶子的所有简单路劲都包含相同数目的黑色节点

5，B树
    B树（b-tree）是一种树状数据结构，能够用来存储排序后的数据，这种数据结构能够让查找数据，循环存储，插入数据及删除都在对数时间完成
    b树作为一种多路搜索树（并不是二叉的）
        a,定义任意非叶子节点最多只有M个儿子；且M>2
        b,根节点的儿子树为[2,M]
        c,除根节点以外的非叶子节点的儿子树为[M/2,M]
        d,每个节点存放至少M/2-1(取整)和至多M-1个关键字；（至少2个关键字）
        e,非叶子结点的关键字个数=指向儿子的指针个数-1
        f,非叶子节点的关键字：K[1]....K[M-1] 且 K[i]<K[i+1]
        g,非叶子结点的指针：P[1],P[2]....P[M] 其中P[1]指向关键字小于K[1]的子树，P[M]指向关键字大于K[M-1]的子树，其他P[i]指向关键字属于（K[i-1],K[i]）的子树
        h,所有的叶子节点位于同一层

6，B+树
    B+树是B树的变体，是一种多路搜索树
       a,定义基本与B树相同
       b,非叶子节点的子树指针与关键字个数相同
       c,非叶子节点的子树指针P[i] 指向关键字值属于k[i],k[i+1]的子树
       e,为所有的叶子节点增加一个链指针
       f,所有关键字都在叶子节点出现
       B+树的性质
        1，所有关键字都出现在叶子节点的链表中，且链表中的关键字恰好是有序的
        2，不可能在非叶子节点命中
        3，非叶子结点相当于是叶子节点的索引，叶子节点相当于是存储数据的数据层
        4，更适合文件索引系统

                             F
                           /  \
                         /     \
                       B         G
                     /   \         \
                    /     \         \
                    A     D          I
                         /  \        /
                        /    \      /
                        C     E     H
树的遍历
    1，前序遍历  首先访问根节点，然后遍历左子树，最后遍历右子树   F-B-A-D-C-E-G-I-H
    2，中序遍历  先遍历左子树，然后访问根节点，然后遍历右子树  A B C D E F G H I
    3，后序遍历  先遍历左子树，然后右子树，最后访问树的根节点  A C E D B H I G F
    4，层序遍历  从根节点开始，遍历相邻节点，然后是二级，三级，依次类推  F B G A D I C E H

















