mybatis的初始化过程
    1，加载配置文件
    2，解析配置文件，将配置文件中的信息装载到Configuration
    3，根据Configuration创建SqlSessionFactory并返回

1. 调用SqlSessionFactoryBuilder对象的build(inputStream)方法；
2. SqlSessionFactoryBuilder会根据输入流inputStream等信息创建XMLConfigBuilder对象;
3. SqlSessionFactoryBuilder调用XMLConfigBuilder对象的parse()方法；
4. XMLConfigBuilder对象返回Configuration对象；
5. SqlSessionFactoryBuilder根据Configuration对象创建一个DefaultSessionFactory对象；
6. SqlSessionFactoryBuilder返回 DefaultSessionFactory对象给Client，供Client使用。


SqlSession       作为MyBatis工作的主要顶层API，表示和数据库交互的会话，完成必要数据库增删改查功能
Executor        MyBatis执行器，是MyBatis 调度的核心，负责SQL语句的生成和查询缓存的维护
StatementHandler   封装了JDBC Statement操作，负责对JDBC statement 的操作，如设置参数、将Statement结果集转换成List集合。
ParameterHandler   负责对用户传递的参数转换成JDBC Statement 所需要的参数，
ResultSetHandler   负责将JDBC返回的ResultSet结果集对象转换成List类型的集合；
TypeHandler     负责java数据类型和jdbc数据类型之间的映射和转换
MappedStatement    MappedStatement维护了一条<select|update|delete|insert>节点的封装，
SqlSource      负责根据用户传递的parameterObject，动态地生成SQL语句，将信息封装到BoundSql对象中，并返回
BoundSql       表示动态生成的SQL语句以及相应的参数信息
Configuration    MyBatis所有的配置信息都维持在Configuration对象之中。


mybatis工作过程分析
    1，开启一个数据库访问会话---创建SqlSession对象：
    2，为SqlSession传递一个配置的Sql语句 的Statement Id和参数，然后返回结果：
    3，MyBatis执行器Executor根据SqlSession传递的参数执行query()方法
    4，StatementHandler对象负责设置Statement对象中的查询参数、处理JDBC返回的resultSet，将resultSet加工为List 集合返回：
    5，StatementHandler 的parameterize(statement) 方法的实现：
    6，StatementHandler 的List<E> query(Statement statement, ResultHandler resultHandler)方法的实现：

mybatis的缓存分为两级：一级缓存、二级缓存
    一级缓存是SqlSession级别的缓存，缓存的数据只在SqlSession内有效
    二级缓存是mapper级别的缓存，同一个namespace公用这一个缓存，所以对SqlSession是共享的