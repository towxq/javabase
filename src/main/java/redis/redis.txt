Redis
    ubuntu安装redis
        sudo apt-get update
        sudo apt-get install redis-server

        启动redis
        redis -server

        查看redis是否启动
        redis-cli

        redis 127.0.0.1:6379>ping
        PONG

    Redis支持的五种数据类型
         string(字符串)  二进制安全的，可以包含任何数据，最大512M,字符串可以存储字节串，整数，浮点数
            get  keyname  value
            set  keyname
            del  keyname


         hash(哈希)   hash是一个键值的集合 每个哈希可以存储40多亿的键值对
            hset 在散列里面关联给定的键值对
                hset hash-ket sub-keyq value1
            hget 获取指定散列键的值
                hget hash-key sub-key1
            hgetall 获取散列包含的键值对
                hgetall hash-key
            hdel 如果给定的键存在散列里，则移除
                hdel hash-key sub-key1


         list(列表)  简单的字符串的列表，按照插入的顺序排序，可以添加一个元素到列表的头部或者尾部 每个列表可以存储40多亿
            rpush 将指定的值推入列表的右端
                rpush list-key-name value
            lrange 获取列表在给定范围的值
                lrange list-key-name 0 -1
            lindex 获取列表在给定位置的单个元素
                lindex list-key-name 1
            lpop 从列表的左端弹出一个值，并放回被弹出的值
                lpop list-key-name


         set(基础知识.集合)   string类型的无序集合 集合可以通过哈希表实现
            sadd 将给定的元素添加到集合
                sadd set-key value
            smembers 返回集合包含的所有元素
                smember set-key
            sismember 检查给定的元素是否存在集合中
                sismember set-key value
            srem 如果给定的元素存在于集合中，移除该元素
                srem set-key value

         zset(有序集合)  zser和set一样也是string类型的集合，但是不允许重复的
            zadd 将一个带有给定分值得成员添加到有序集合里
                zadd zset-key 728 member1
                zadd zset-key 982 member0
            zrange 根据元素在有序排列中所处的位置，从有序集合里面获取多个元素
                zrange zset-key 0 -1 withscores
            zrangebyscore 获取有序集合在给定分值范围内的所有元素
                zrangebyscore zset-key 0 800 withscores
            zrem 如果给定成员存在于有序集合，那么移除这个成员
                zrem zset-key member1


    redis事务可以一次执行多个命令
        1，批量操作在发送exec命令前被放入队列缓存
        2，收到exec命令后进入事务执行，事务中任意命令执行失败，其余命令已然执行
        3，在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令列中


        一个事务从开始到执行会经历以下三个阶段
        开始事务
        命令入列
        执行事务
        单个redis命令执行是原子性的，redis没有在事务上增加任何维持原子性的机制，所以redis事务的执行并不是原子性的
        事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化的操作，中间某指令的失败不会导致前面指令的回滚，也不会造成后续的指令不做


    持久化选项
        1，快照
            bgsave redis会调用fork来创建一个子进程，子进程负责将快照写入硬盘，父进程继续处理请求，redis的内存越来越多的时候，bgsave在创建子进程时，所耗费的
                   时间会越来越久，所以会导致redis的性能降低。
            save redis服务在创建快照完毕之前不在响应其他任何的请求
        2，只追加文件
            AOF持久化会将执行的命令写到AOF文件的末尾，来记录变化。

分布式锁
    Redis使用WATCH命令来代替对数据进行加锁，因为WATCH命令只会在数据被其他客户端抢先修改的情况下通知执行了这个命令的客户端，而不会阻止其他客户端对数据进行修改，所以这个命令称为乐观锁