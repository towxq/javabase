进程：每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含1--n个线程。（进程是资源分配的最小单位）

线程：同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器(PC)，线程切换开销小。（线程是cpu调度的最小单位）

线程和进程一样分为五个阶段：创建、就绪、运行、阻塞、终止。

多进程是指操作系统能同时运行多个任务（程序）

多线程是指在同一程序中有多个顺序流在执行。

并行：多个cpu实例或者多台机器处理执行一段处理逻辑，是真正的同时

并发：通过CPU调度算法，让用户看上去同时执行，实际上从cpu操作层面不是真正的同时

线程安全：经常用来描述一段代码，指在并发的情况下，该代码经过多线程使用，线程的调度不影响任何结果，这个时候使用多线程，我们只关注系统的内存，CPU是不是够用
反过来，线程不安全意味着线程的调度顺序会影响最终的结果

同步：Java中的同步指的是通过人为的控制和调度，保证共享资源的多线程访问成为线程安全。线程的安全高于性能

线程的状态：
1.新建状态（new）：创建一个线程对象
2，就绪状态（runnable） ：线程对象创建后，其他线程调用了该对象的start()方法，该状态的线程处于可运行线程池中，变得可运行，等待获得CPU的使用权
3，运行状态（running）：就绪状态的线程获取了CPU，执行程序代码
4，阻塞状态（blocked）: 阻塞状态是多线程因为某种原因放弃CPU的使用权，暂时停止运行，直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：
    1，等待阻塞  wait()  会释放持有的锁
    2，同步阻塞  运行的线程在获取对象的同步锁时，若改锁被别的线程占用，则jvm会把该线程放入锁池中
    3，其他阻塞  运行的线程执行sleep()或join()方法 或者发出了IO请求，jvm会把该线程置为阻塞状态，当sleep()状态超时时，
    join()等待线程终止或者超时，等待io处理完毕，线程重新转入就绪状态

线程调度：
1，线程调度优先级： 取值是1--10 最高是10  最低是1  默认是5
2，线程睡眠Thread.sleep(long millis) 使线程转到阻塞状态,毫秒为单位,当睡眠结束后，就转为就绪状态（runnable）
3，线程等待：wait()方法，当前线程等待，直到其他线程调用notify()或者notifyAll()
4, 线程让步：Thread.yield()方法 暂停当前执行的线程，把执行机会让给优先级更高的线程
5，线程加入：join()方法，等待其他线程终止。在当前线程中调用另一个线程的join方法，则当前线程转入阻塞状态，直到另外一个线程运行结束
   当前线程在由阻塞状态转为就绪状态
6，线程唤醒：notify()方法，唤醒等待的单个线程，notifyAll()唤醒等待的所有线程


线程的创建数量是随着虚拟机栈内存的增多而减少的，是一种反比关系 粗略的估计一个Java进程的大小为：堆内存+线程数量*栈内存

32Windows允许的最大进程内存为2GB 进程数量与堆内存的大小也是反比关系，不过堆内存是基数，栈内存是系数

线程数量 = （最大地址空间（MAXProcessMemory）-JVM内存-ReservedOsMemory(系统保留内存)）/ThreadStackSize(XSS)

守护线程  正常情况下，若JVM中没有一个非守护线程，则JVM的进程退出

synchronized 可以实现一个简单的策略来防止线程干扰和内存一致性错误

程序死锁
1，交叉锁可导致程序出现死锁
    线程A持有R1的锁等待获取R2的锁，线程B持有R2的锁等待获取R1的锁
2，内存不足
    并发请求系统可用内存时，如果此时系统内存不足，则会出现死锁的情况
3，一问一答式数据交互
    服务端开启某个端口，等待客户端访问，客户端发送请求立即等待接收，由于某种原因服务端错过了客户端的请求，此时客户端和服务端都在等待对方发送数据
4，数据库死锁
    数据库的表级别的锁，还是行级别的锁，比如某个线程执行for update语句退出可事务，其他线程访问该数据库时陷入死锁
5，文件锁
    某线程获取了文件锁意外退出，其他读取该文件的线程也将会进入死锁直到系统释放文件句柄资源
6，死循环引起的死锁
    程序由于代码原因或者某些异常处理不得当，进入死循环，虽然查看线程堆栈信息不会出现任何死锁的迹象，但程序不工作，ＣＰＵ占有率高，这种死锁一般称为系统假死

