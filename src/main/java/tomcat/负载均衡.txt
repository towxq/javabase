负载均衡
    指多台服务器以对称的方式组成一个服务器集合，每台服务器都具有等价的地位，都可以单独对外提供服务而无需其他服务器的辅助

    通过某种负载分担技术，将外部发送来的请求均匀分配到对称结构中的某一台服务器，而接受到的请求的服务器独立的回应客户的请求

    复杂均衡分为软件均衡和硬件均衡，如ngnix和F5

    ngnix的负载算法 默认是轮询法

轮询法
     轮询法的优点：试图做到请求转移的绝对均衡。

     轮询法的缺点：为了做到请求转移的绝对均衡，必须付出相当大的代价，因为为了保证pos变量修改的互斥性，需要引入重量级的悲观锁synchronized，这将会导致该段轮询代码的并发吞吐量发生明显的下降。

随机法
     通过系统随机函数，根据后端服务器列表的大小值来随机选择其中一台进行访问。

     由概率统计理论可以得知，随着调用量的增大，其实际效果越来越接近于平均分配流量到每一台后端服务器，也就是轮询的效果。

源地址哈希法
    源地址哈希的思想是获取客户端访问的IP地址值，通过哈希函数计算得到一个数值，用该数值对服务器列表的大小进行取模运算，得到的结果便是要访问的服务器的序号。

    通过客户端的ip也就是remoteIp，取得它的Hash值，对服务器列表的大小取模，结果便是选用的服务器在服务器列表中的索引值。

    源地址哈希法的优点：保证了相同客户端IP地址将会被哈希到同一台后端服务器，直到后端服务器列表变更。

    根据此特性可以在服务消费者与服务提供者之间建立有状态的session会话。

    源地址哈希算法的缺点：除非集群中服务器非常稳定，基本不会上下线。否则一旦有服务器上线、下线，那么通过源地址哈希算法路由到的服务器是服务器上线、下线前路由到的服务器的概率非常低。如果是session则取不到session，如果是缓存则可能引发"雪崩"。

加权轮询法
    不同的服务器可能机器配置和当前系统的负载并不相同，因此它们的抗压能力也不尽相同。

    给配置高、负载低的机器配置更高的权重，让其处理更多的请求，而低配置、高负载的机器，则给其分配较低的权重，降低其系统负载。

    加权轮询法可以很好地处理这一问题，并将请求顺序按照权重分配到后端。

    与轮询法类似，只是在获取服务器地址之前增加了一段权重计算的代码。

    根据权重的大小，将地址重复地增加到服务器地址列表中，权重越大，该服务器每轮所获得的请求数量越多。

加权随机法
    与加权轮询法类似，加权随机法也是根据后端服务器不同的配置和负载情况来配置不同的权重。

    不同的是，它是按照权重来随机选择服务器的，而不是顺序。

最小连接数法
    以后端服务器的视角来观察系统的负载，而非请求发起方来观察。最小连接数法便属于此类。

    最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它正是根据后端服务器当前的连接情况，动态地选取其中当前积压连接数最少的一台服务器来处理当前请求，尽可能地提高后端服务器的利用效率，将负载合理地分流到每一台机器。