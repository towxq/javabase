Java序列化
    　  把对象转换为字节序列的过程称为对象的 序列化。
    　　把字节序列恢复为对象的过程称为对象的 反序列化。

    　　对象的序列化主要有两种用途：
    　　1） 把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中；
    　　2） 在网络上传送对象的字节序列。

        serialVersionUID:字面意思上是序列化的版本号，凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量
                          SerialVersionUID用于对象的版本控制。当您添加或修改类中的任何字段时，已经序列化的类将无法恢复，
                          因为serialVersionUID已为新类生成与旧的序列化对象将不同。Java序列化过程依赖于正确的serialVersionUID恢复序列化对象的状态，
                          并在serialVersionUID不匹配时抛出java.io.InvalidClassException 异常。


            显式地定义serialVersionUID有两种用途：
        　　　　1、 在某些场合，希望类的不同版本对序列化兼容，因此需要确保类的不同版本具有相同的serialVersionUID；
        　　　　2、 在某些场合，不希望类的不同版本对序列化兼容，因此需要确保类的不同版本具有不同的serialVersionUID。

        Transient 关键字
            transient修饰符仅适用于变量，不适用于方法和类。在序列化时，如果我们不想序列化特定变量以满足安全约束，那么我们应该将该变量声明为transient。
            执行序列化时，JVM会忽略transient变量的原始值并将默认值保存到文件中。因此，transient意味着不要序列化。

具体怎么序列化呢？
    以 ObjectOutputStream 为例吧，它在序列化的时候会依次调用 writeObject()→writeObject0()→writeOrdinaryObject()→writeSerialData()→invokeWriteObject()→defaultWriteFields()
那怎么反序列化呢？
    以 ObjectInputStream 为例，它在反序列化的时候会依次调用 readObject()→readObject0()→readOrdinaryObject()→readSerialData()→defaultReadFields()

常用的Serialize方案
    1，java的原生的ObjectOutputStream.write()和ObjectInputStream.read()进行对象序列化和反序列化
        优点：
             1，java自带API序列化，简单方便，无依赖
             2，不用担心其中的数据解析会丢失字段，精度
        缺点
             1，双方调试麻烦，跨团队合适问题多
             2，传递的对象中包含了元素信息，占用空间较大
    2，基于JSON的序列化和反序列化
        优点
            1，简单，方便，无需关注序列化的对象格式
            2，开源中有很多的组件的支持
            3，很多RPC框架中，基本都支持这样的方案
        缺点
            1，对象属性中如果包含Object，在反序列化中处理会很麻烦
            2，文本类型会占有比较大的数据空间
            3，比较依赖JSON的解析包的兼容性和性能
            4，序列化无论类型先转换为String ，转成byte[] 会增加内存的拷贝次数
            5，反序列化的时候，必须将整个JSON反序列化对象后才能进行读取，java对象层次多的对象，占用的内存会远远大于数据本身
    3，基于XML的序列化和反序列化
            优点
                1，无需关注对象的格式
                2，可读性好
            缺点
                1，性能差
                2，数据放大，占用内存大



Hessian序列化
        hessian序列化比Java序列化高效的多，字节流也要短的多，支持的没有Java的序列化全面，Java序列化将类的元数据和业务数据全部序列化，整个继承关系也全部序列化，包含所有信息
        因此效率较低，但是可用也可靠

        hessian着重与数据， 像integer a = 1 会 序列化 I a 1 复杂对象通过反射将所有的属性转成Map  使用hessian序列化时，一定要注意子类和父类不能有同名字段

