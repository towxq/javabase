一、Java 基础
1.JDK 和 JRE 有什么区别？
    JDK:java development kit
    JRE:java runtime Environment
    JDK包含JRE

2.== 和 equals 的区别是什么？
    ==比较Java基础类型
    equals比较两个对象是否相等
3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？
    不对，不同的对象可能会生成相同的hashcode值，当hashcode相同时在用equals比较
4.final 在 java 中有什么作用？
      final 修饰的类叫最终类，该类不能被继承。
      final 修饰的方法不能被重写。
      final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。
5.java 中的 Math.round(-1.5) 等于多少？
       -1
6.String 属于基础的数据类型吗？
    不是
    8种基本数据类型： boolean byte char shrot int long float double
    对应的基本类型包装类：Boolean Byte Character Short Integer Long Float Double
7.java 中操作字符串都有哪些类？它们之间有什么区别？
    操作字符串的类有：String、StringBuffer、StringBuilder。
    String 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象，每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用 String。
    StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。
8.String str="i"与 String str=new String("i")一样吗？
   不一样，因为内存的分配方式不一样。String str="i"的方式，java 虚拟机会将其分配到常量池中；而 String str=new String("i") 则会被分到堆内存中。
9.如何将字符串反转？
    使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。
10.String 类的常用方法都有那些？
    indexOf()：返回指定字符的索引。
    charAt()：返回指定索引处的字符。
    replace()：字符串替换。
    trim()：去除字符串两端空白。
    split()：分割字符串，返回一个分割后的字符串数组。
    getBytes()：返回字符串的 byte 类型数组。
    length()：返回字符串长度。
    toLowerCase()：将字符串转成小写字母。
    toUpperCase()：将字符串转成大写字符。
    substring()：截取字符串。
    equals()：字符串比较。

11.抽象类必须要有抽象方法吗？
    抽象类不一定要有抽象方法；但是有抽象方法的类一定是抽象类
12.普通类和抽象类有哪些区别？
    a.抽象类不能被实例化。
    b.抽象类可以有构造函数，被继承时子类必须继承父类一个构造方法，抽象方法不能被声明为静态。
    c.抽象方法只需申明，而无需实现，抽象类中可以允许普通方法有主体
    d.含有抽象方法的类必须申明为抽象类
    e.抽象的子类必须实现抽象类中所有抽象方法，否则这个子类也是抽象类。
13.抽象类能使用 final 修饰吗？
   不能，定义抽象类就是让其他类继承的，如果定义为 final 该类就不能被继承，这样彼此就会产生矛盾，所以 final 不能修饰抽象类
14.接口和抽象类有什么区别？
    默认方法实现：抽象类可以有默认的方法实现；接口不能有默认的方法实现。
    实现：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。
    构造函数：抽象类可以有构造函数；接口不能有。
    main 方法：抽象类可以有 main 方法，并且我们能运行它；接口不能有 main 方法。
    实现数量：类可以实现很多个接口；但是只能继承一个抽象类。
    访问修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问修饰符。
15.java 中 IO 流分为几种？
    按功能来分：输入流（input）、输出流（output）。
    按类型来分：字节流和字符流。
    字节流和字符流的区别是：字节流按 8 位传输以字节为单位输入输出数据，字符流按 16 位传输以字符为单位输入输出数据。
16.BIO、NIO、AIO 有什么区别？
    BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。
    NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。
    AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。
17.Files的常用方法都有哪些？
    Files.exists()：检测文件路径是否存在。
    Files.createFile()：创建文件。
    Files.createDirectory()：创建文件夹。
    Files.delete()：删除一个文件或目录。
    Files.copy()：复制文件。
    Files.move()：移动文件。
    Files.size()：查看文件个数。
    Files.read()：读取文件。
    Files.write()：写入文件。
二、容器
18.java 容器都有哪些？
    数组,String,java.util下的集合容器
        HashSet 底层采用的HashMap的实现
        TreeSet 底层采用的HashMap的实现
            value域里面装的是同一个Object的引用
        LinkedList 双向链表，没有初始化大小，添加块
        ArrayList 底层是数组 初始大小是10，扩容后的大小 = 原始大小*1.5 读写块
        HashMap 无序的，方法是不同步的额，线程不安全,默认是16  JDK1.7是数组+链表  JDK1.8 是数组+链表+红黑树
        TreeMap 有序的
        Hashtable 无序的，方法是同步的，线程安全，hash数组的默认大小是11，增加的方式old*2+1
19.Collection 和 Collections 有什么区别？
    1、java.util.Collection 是一个集合接口。它提供了对集合对象进行基本操作的通用接口方法。
    Collection接口在Java 类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式。
    2、java.util.Collections 是一个包装类。它包含有各种有关集合操作的静态多态方法。此类不能实例化，
    就像一个工具类，服务于Java的Collection框架
20.List、Set、Map 之间的区别是什么？
    List 有序集合，允许可重复
    Set  无序集合，不允许重复
    Map 键值对应，无序,元素可重复
21.HashMap 和 Hashtable 有什么区别？
    HashMap线程不安全，是Map的实现类，不包含重复键，允许null key 和Null value
    HashTable是线程安全的，不允许null key
22.如何决定使用 HashMap 还是 TreeMap？

23.说一下 HashMap 的实现原理？
    HashMap是基于哈希表的Map接口的非同步实现，
    允许使用null值和null键(HashMap最多只允许一条记录的键为null，允许多条记录的值为null。)。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。
    HashMap中不允许出现重复的键（Key）
    Hashmap是非线程安全的，
    其迭代器是fail-fast的
    HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体，（JDK1.8增加了红黑树部分,会将时间复杂度从O(n)降为O(logn)）。
    数据存储：先根据key的hashCode（使用key的hashCode()方法获取）重新计算hash值，根据hash值算出这个元素在数组中的位置（即下标）， 如果数组该位置上已经存放有其他元素了，那么在这个位置上的元素将以链表的形式存放，新加入的放在链头，最先加入的放在链尾。如果数组该位置上没有元素，就直接将该元素放到此数组中的该位置上。
    数据读取：首先根据key的hashCode，找到其数组中对应位置的数据(可能只有一个数据，也可能是多个数据，其表现形式是一个链表)，然后通过key的equals方法在对应位置的链表中找到需要的元素。
    hashMap的默认初始容量是16个，其会有一个负载因子，用于当hashMap中的数据量等于容量*负载因子时，hashMap会进行扩容，扩大的容量是原本的2倍。负载因子的默认初始值为0.75
24.说一下 HashSet 的实现原理？
    它是基于HashMap实现的，底层采用HashMap来保存元素，而且只使用了HashMap的key来实现各种特性。HashSet实现了Set接口
    HashSet较HashMap来说比较慢
    HashSet中的数据不是key-value键值对，其只是单值，虽然其借助与HashMap来实现，但是其只是将值作为key来存入HashMap中，因为HashMap中的值是key-value键值对的，所以每个HashSet存储到HashMap的数据对应的value值只是一个new Object()对象
    当添加数据时，如果set中尚未包含指定元素，则添加指定元素。更确切地讲，如果此 set 没有包含满足(e==null ? e2==null : e.equals(e2))的元素e2，则向此set 添加指定的元素e。如果此set已包含该元素，则该调用不更改set并返回false。但底层实际将将该元素作为key放入HashMap。
25.ArrayList 和 LinkedList 的区别是什么？
    ArrayList底层是数组，读快，写慢，需要扩容数组
    LinkedList底层为链表，写快，读慢

27.ArrayList 和 Vector 的区别是什么？
    Vertor是线程安全的

28.Array 和 ArrayList 有何区别？
    Array可以存储基本类型和对象类型，不能扩容
    ArrayList只能存储对象类型

30.哪些集合类是线程安全的？
    Vector,hashtable

31.迭代器 Iterator 是什么？
    迭代Collection的类

34.怎么确保一个集合不能被修改？
    Collections.unmodifiableList(List)
    Collections.unmodifiableSet(Set)

三、多线程
35.并行和并发有什么区别？
    并行：多个cpu实例或者多台机器处理执行一段处理逻辑，是真正的同时
    并发：通过CPU调度算法，让用户看上去同时执行，实际上从cpu操作层面不是真正的同时
36.线程和进程的区别？
    进程：每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含1--n个线程。（进程是资源分配的最小单位）
    线程：同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器(PC)，线程切换开销小。（线程是cpu调度的最小单位）
37.守护线程是什么？
    为用户线程服务的线程，需要在线程开始时设置

38.创建线程有哪几种方式？
    Thread run
    Runnable run
    Callable cal

39.说一下 runnable 和 callable 有什么区别？
    返回值

44.创建线程池有哪几种方式？

45.线程池都有哪些状态？

47.在 java 程序中怎么保证多线程的运行安全？

48.多线程锁的升级原理是什么？

49.什么是死锁？

50.怎么防止死锁？

51.ThreadLocal 是什么？有哪些使用场景？

52.说一下 synchronized 底层实现原理？

53.synchronized 和 volatile 的区别是什么？

54.synchronized 和 Lock 有什么区别？

55.synchronized 和 ReentrantLock 区别是什么？

56.说一下 atomic 的原理？

四、反射
57.什么是反射？
58.什么是 java 序列化？什么情况下需要序列化？
59.动态代理是什么？有哪些应用？
60.怎么实现动态代理？

六、Java Web
64.jsp 和 servlet 有什么区别？

65.jsp 有哪些内置对象？作用分别是什么？
66.说一下 jsp 的 4 种作用域？
67.session 和 cookie 有什么区别？
68.说一下 session 的工作原理？
69.如果客户端禁止 cookie 能实现 session 还能用吗？
70.spring mvc 和 struts 的区别是什么？
71.如何避免 sql 注入？
72.什么是 XSS 攻击，如何避免？
73.什么是 CSRF 攻击，如何避免？

七、异常
74.throw 和 throws 的区别？
75.final、finally、finalize 有什么区别？
76.try-catch-finally 中哪个部分可以省略？
77.try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？
78.常见的异常类有哪些？

八、网络
79.http 响应码 301 和 302 代表的是什么？有什么区别？
80.forward 和 redirect 的区别？
81.简述 tcp 和 udp的区别？
82.tcp 为什么要三次握手，两次不行吗？为什么？
83.说一下 tcp 粘包是怎么产生的？
84.OSI 的七层模型都有哪些？
85.get 和 post 请求有哪些区别？
86.如何实现跨域？
87.说一下 JSONP 实现原理？

九、设计模式
88.说一下你熟悉的设计模式？
89.简单工厂和抽象工厂有什么区别？

十、Spring/Spring MVC
90.为什么要使用 spring？
91.解释一下什么是 aop？
92.解释一下什么是 ioc？
93.spring 有哪些主要模块？
94.spring 常用的注入方式有哪些？
95.spring 中的 bean 是线程安全的吗？
96.spring 支持几种 bean 的作用域？
97.spring 自动装配 bean 有哪些方式？
98.spring 事务实现方式有哪些？
99.说一下 spring 的事务隔离？
100.说一下 spring mvc 运行流程？
101.spring mvc 有哪些组件？
102.@RequestMapping 的作用是什么？
103.@Autowired 的作用是什么？

springboot的启动过程？
IOC和AOP原理讲一下

十三、Mybatis
125.mybatis 中 #{}和 ${}的区别是什么？
126.mybatis 有几种分页方式？
127.RowBounds 是一次性查询全部结果吗？为什么？
128.mybatis 逻辑分页和物理分页的区别是什么？
129.mybatis 是否支持延迟加载？延迟加载的原理是什么？
130.说一下 mybatis 的一级缓存和二级缓存？
131.mybatis 和 hibernate 的区别有哪些？
132.mybatis 有哪些执行器（Executor）？
133.mybatis 分页插件的实现原理是什么？
134.mybatis 如何编写一个自定义插件？

十六、Zookeeper
157.分布式 是什么？
158.分布式 都有哪些功能？
159.分布式 有几种部署模式？
160.分布式 怎么保证主从节点的状态同步？
161.集群中为什么要有主节点？
162.集群中有 3 台服务器，其中一个节点宕机，这个时候 分布式 还可以使用吗？
163.说一下 分布式 的通知机制？


十八、Redis
179.redis 是什么？都有哪些使用场景？
    Redis是一个开源的内存中的数据结构存储系统，它可以用作：数据库、缓存和消息中间件。
180.redis 有哪些功能？
    它可以用作：数据库、缓存和消息中间件。
181.redis 和 memecache 有什么区别？
    (1) memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型
    (2) redis的速度比memcached快很多
    (3) redis可以持久化其数据
    (4)Redis支持数据的备份，即master-slave模式的数据备份
182.redis 为什么是单线程的？
    因为Redis是基于内存的操作，CPU不是Redis的瓶颈，Redis的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了
183.什么是缓存穿透？怎么解决？
    缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。
184.redis 支持的数据类型有哪些？
    它支持多种类型的数据结构，如字符串（String），散列（Hash），列表（List），集合（Set），有序集合（Sorted Set或者是ZSet）与范围查询，Bitmaps，Hyperloglogs 和地理空间（Geospatial）
    索引半径查询。其中常见的数据结构类型有：String、List、Set、Hash、ZSet这5种。
185.redis 支持的 java 客户端都有哪些？
    Jedis、Redission
186.jedis 和 redisson 有哪些区别？
     Jedis是Redis的Java实现的客户端，其API提供了比较全面的Redis命令的支持；Redisson实现了分布式和可扩展的Java数据结构，和Jedis相比，功能较为简单，不支持字符串操作，不支持排序、事务、管道、分区等Redis特性，但是在集群模式下，
      Redisson为单个Redis集合类型提供了自动分片的功能，支持分布式对象，分布式集合，分布式锁。Redisson的宗旨是促进使用者对Redis的关注分离，从而让使用者能够将精力更集中地放在处理业务逻辑上。
187.怎么保证缓存和数据库数据的一致性？
188.redis 持久化有几种方式？
            1，快照
                bgsave redis会调用fork来创建一个子进程，子进程负责将快照写入硬盘，父进程继续处理请求，redis的内存越来越多的时候，bgsave在创建子进程时，所耗费的
                       时间会越来越久，所以会导致redis的性能降低。
                save redis服务在创建快照完毕之前不在响应其他任何的请求
            2，只追加文件
                AOF持久化会将执行的命令写到AOF文件的末尾，来记录变化。
189.redis 怎么实现分布式锁？
190.redis 分布式锁有什么缺陷？
191.redis 如何做内存优化？
192.redis 淘汰策略有哪些？
    volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰
    volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰
    volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰
    allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰
    allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰
    no-enviction（驱逐）：禁止驱逐数据
    volatile和allkeys规定了是对已设置过期时间的数据集淘汰数据还是从全部数据集淘汰数据，后面的lru、ttl以及random是三种不同的淘汰策略，再加上一种no-enviction永不回收的策略
    使用策略规则：
    　　1、如果数据呈现幂律分布，也就是一部分数据访问频率高，一部分数据访问频率低，则使用allkeys-lru
    　　2、如果数据呈现平等分布，也就是所有的数据访问频率都相同，则使用allkeys-random
193.redis 常见的性能问题有哪些？该如何解决？
    (1) Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件
        Master写内存快照，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以Master最好不要写内存快照;AOF文件过大会影响Master重启的恢复速度)
    (2) 如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次
    (3) 为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内
    (4) 尽量避免在压力很大的主库上增加从库
    (5) 主从复制不要用图状结构，用单向链表结构更为稳定，即：Master <- Slave1 <- Slave2 <- Slave3...

十九、JVM
194.说一下 jvm 的主要组成部分？及其作用？
195.说一下 jvm 运行时数据区？
196.说一下堆栈的区别？
197.队列和栈是什么？有什么区别？
198.什么是双亲委派模型？
199.说一下类加载的执行过程？
200.怎么判断对象是否可以被回收？
201.java 中都有哪些引用类型？
202.说一下 jvm 有哪些垃圾回收算法？
203.说一下 jvm 有哪些垃圾回收器？
204.详细介绍一下 CMS 垃圾回收器？
205.新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？
206.简述分代垃圾回收器是怎么工作的？
207.说一下 jvm 调优的工具？
208.常用的 jvm 调优的参数都有哪些？

Java集合：HashMap和ConcurrentHashMap，平时最好有读一些源码，最好知道每个参数为什么设置成这么大？有什么好处？
JUC包肯定要学，即使平时的编程根本不用，也必须得会。至少要知道aba，cas，aqs，unsafe，volatile，sync，以及常见的各种lock，死锁，线程池参数等，也必须要明白自旋，阻塞，死锁和它如何去定位，oom如何定位问题，cpu过高如何定位等基本的操作，你可以没有生产调试经验，但不代表你可以不会top，jps，jstack，jmap这些可能会问的东西。以及可能衍生的jmm模型和mesi协议等。
大厂必问JVM：垃圾回收算法，垃圾收集器、JVM内存模型，每个区域用途，各种oom的种类，jvm调优经验，类加载过程，双亲委派等。
Spring就得抽空看源码了，一般会问到bean的生命周期，如何解决循环依赖，实现事务原理，动态代理原理等。
Dubbo也是必须问的，设计框架，负载均衡。
Redis更要多懂一点，单线程模型，aof，rdb，rewrite，主从，cluster，哪些类型？包含一些缓存常见的问题击穿、穿透、雪崩、数据一致性等。
Mysql，事务，锁，索引，b+树，主从这些你必须会
Mq ，我用的rocketmq，你得知道为什么用，重复消费，顺序消息，事务消息，高可用，消息丢失，挤压场景，整个消息发送消费的流程，读过源码更佳，更好吹
Netty的话，零拷贝，bio，nio，aio，架构设计怎么样子的？用过看过更好
算法，建议去刷题，我运气好，简单的算法让我碰到了，一些快排，堆排，二叉树相关的，链表反转，成环，环节点，跳楼梯等常规的简单算法建议刷刷，双指针，dp，递归这些还是多找找感觉，大数据内存有限的场景的统计，有时间一些middle可以去试试，手写红黑树你要是可以，那我估计算法你稳了。
网络，http，tcp，https，udp，7层网络协议等，最好结合自己理解，背，你都要背下来。
还有就是一些分布式事务实现，架构实现，比如抢红包，高并发下单等常规的场景设计，你来设计，你怎么去设计？多找一些大牛或者上网自己查，帮你看看有哪些漏洞，有那些解决方案？业界有哪些好的中间件？


阿里一面：

自我介绍、自己做的项目和技术领域
说一下sync的底层实现，锁优化，和lock的对比
讲一下JVM参数调优详细过程
为什么这么设置？好处是什么？描述gc场景，如何去分析gc日志？
redis数据结构，使用场景，微博场景使用redis如何去设计用户关系？
线程池参数设定，为什么这么设定，作用？7大参数
spring的循环依赖如何解决？为什么要三级缓存？
优先级队列的底层原理？
阿里二面：

自我介绍一下吧
聊项目
结合你项目问你如何设计，提出漏洞，你怎么解决？如何改进，万一挂了？加一台机器有没有问题？如果我非要不出问题怎么办？
高并发下单扣库存场景如何设计
rocketMQ架构设计原理
Dubbo框架实现原理
最近读了什么书？平时怎么学习？
常用的负载均衡，该怎么用，你能说下吗？
阿里三面：

这一面主要问项目，给你的压力感比较强
结合项目问，为什么这么设计？让你去优化，你怎么优化，引导你用一个合理的更好的方式去优化，数据库的设计等
在公司做了什么事情，各个系统业务线都是做什么的，你的绩效，手写算法链表反转？
阿里四面：

JVM的主要组成部分及其作用？
JVM运行时数据区包含哪些？
JVM垃圾回收机制，何时触发MinorGC等操作
JVM的垃圾回收算法：
JVM 调优的工具？
常用的JVM调优参数？
堆栈的区别？
详细介绍一下 CMS 垃圾回收器？
怎么判断对象是否可以被回收？
新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？
java类加载过程?
把你知道的中间件都说一下吧（瞬间懵了一下）
HR面：

为什么来阿里？
之前没考虑过阿里吗？
毕业这么久了，你觉得自己最大的改变是什么？
用一句话总结一下自己


线程池，SYNC和Lock锁机制、线程通信、volatile、ThreadLocal、CyclicBarrier、Atom包、CountDownLatch、AQS、CAS原理内存模型
GC垃圾回收，包括分代，GC算法，收集器、类加载和双亲委派、JVM调优，内存泄漏和内存溢出反射和代理、异常、
Java8相关、序列化 servlet、cookie session、Spring AOP、IOC、MVC、事务、动态代理、Mybatis、Tomcat等等相关知识服务发现、治理等，
分布式、dubbo、springcloud微服务原理、kafka，activeMQ，rocketMQ



商品30万
6000万  60万单
线上 800多万  4万单
58万会员
付费会员4000 
线上周转 70
门店周转  80
