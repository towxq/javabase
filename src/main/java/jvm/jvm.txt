1,程序计数器
    是一块较小的内存空间，可以看做是当前线程所执行的字节码的行号指示器。
    字节码解释器工作时就是通过改变这个计数器的值来取下一条需要执行的字节码指令，分支，循环，跳转，异常处理，线程恢复等基础功能都要依赖这个计数器

    由于Java虚拟机的多线程通过线程轮流分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器都只会执行一条线程中的指令，因此，为了线程切换后能恢复到正确的执行位置
    每条线程需要一个独立的程序计数器，各线程之间的计数器互不影响，独立存储，我们称这类内存区域为 “线程私有” 的内存

    如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址，如果正在执行的是Native方法，这个计数器值则为空.
    此内存区域是唯一一个在Java虚拟机中没有规定任何OutOfMemoryError情况的区域


2，Java虚拟栈
    和程序计数器一样，Java虚拟机栈也是线程私有的，他的生命周期与线程相同，虚拟机栈描述的是Java方法执行的内存模型，每个方法执行时都会创建一个栈帧
    用于存储局部变量表，操作数栈，动态链接，方法出口等信息，每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机中入栈到出栈的过程
    我们通常的 栈 就是现在的虚拟机栈，局部变量表存放了编译期可知的各种基本数据类型，对象引用，和returnAddress类型
    局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间完全是确定的，在方法运行期间不会改变的
    这个区域规定两两种异常
        1，如果线程请求的栈深度大于虚拟机所允许的深度，抛出StackOverflowError异常
        2，如果虚拟机栈可以动态的扩展，如果扩展时无法申请到足够的内存，会抛出OutMemoryError


3,本地方法栈
    本地方法栈和虚拟机栈所发挥的作用是非常相似的，他们之间的区别不过是虚拟机栈为虚拟机执行Java方法服务，而本地方法栈则为虚拟机使用到的Native方法服务


4，Java堆
    对于大多数应用来说，Java堆是Java虚拟机所管理的内存中内存最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建，此区域唯一的目的就是存放对象实例
    几乎所有的对象实例都在这里分配内存
    Java堆是垃圾回收管理器的主要区域，因此很多时候也被称为 GC堆 从内存回收的角度来看，由于现在收集器基本采用分代收集算法，所以Java堆中可以细分为：新生代和老年代
    Java堆可以是物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。来实现时，即可以实现成固定大小的，也可以扩展的，现在主流都是可以扩展的
    （通过-Xmx和-Xms控制）如果堆中没有内存完成实例分配，并且堆也无法在扩展，会抛出OutOfMemoryError

5，方法区
    方法区与Java堆一样，在各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码数据，虽然Java虚拟机规范把方法区描述为堆
    的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆） 目的是与Java堆区分开来  Java虚拟机规范对方法区的限制非常宽松，除了和Java堆一样不需要连续的内存和选择固定大小
    或者可扩展外，还可以选择不实现垃圾回收，相对而言，垃圾回收再这一区域比较少出现，这区域的内存回收目标主要是针对常量池的回收和对类型的卸载。

6，运行时常量池
    运行时常量池是方法区的一部分，class文件中除了有类的版本，字段，方法，接口等描述信息外，还有一项是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容在类加载后
    进入方法区的运行时常量池中存放
    Java虚拟机对class文件每一部分（包括常量池）的格式有着严格的规定，每一个字节用于存储哪种数据都必须符合规范上的要求才会被虚拟机认可，装载和执行，但对于运行时常量池，Java
    虚拟机规范没有做任何细节的要求

7，直接内存
    直接内存并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，但这部分内存也被频繁使用，也可能导致OutOfMemoryError异常

主流的商用程序语言，通过可达性分析来判定对象是否存活的，这个算法的基本思想是通过一系列的称为GC Roots的对象作为起点，丛这些节点开始向下搜索，搜索所走过的路劲称为引用链
当一个对象到GC Roots没有任何引用链相连，则证明此对象是可也用的
在Java语言中，可作为GC Roots的对象包括下面几种
    虚拟机栈中的引用对象
    方法区中静态属性引用对象
    方法区中常量引用的对象
    本地方法栈中JNI（一般说的Native方法）引用的对象

1，强引用
    是指在程序代码之中普遍存在的，类似Object obl = new Object()这类的引用，只要加强引用还在，垃圾回收器永远不会回收掉被引用的对象

2，软引用
    用来描述一些还在用但并非必须的对象，对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行二次回收。
    如果这次回收还没有足够的内存，才会抛出内存溢出异常

3，弱引用
    用来描述非必须对象的，但他的强度比软引用更弱一些，被弱引用关联的对象只能存到下一次垃圾收集发生之前，当垃圾收集工作时，无论当前内存是否足够
    都会回收掉只被弱引用关联的对象

4，虚引用
    也被称为幽灵引用或者幻影引用，他是最弱的一种引用关系，一个对象是否有虚引用存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例
    为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系列通知。
























